error arg amount
create structure called game
malloc the structure 
mlx_init()
image size has to be homogenous (64x64)
turn the .png to .xpm
2d images

Keycodes:
ESC == 53
a == 0
w == 13
s == 1
d = 2


typedef struct	s_data {
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;	
}			t_data;

typedef struct	s_vars {
	void	*mlx;
	void	*win;
	int		target_key;
}				t_vars;
/*
static void	my_mlx_pixel_put(t_data *data, int x, int y, int colour)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int*)dst = colour;
}

static int	create_trgb(int t, int r, int g, int b)
{
	return (t << 24 | r << 16 | g << 8 | b);
}
*/
int ft_close(t_vars *vars)
{
	mlx_destroy_window(vars->mlx, vars->win);
	return (0);
}

int main()
{
	t_vars	vars;

	vars.mlx = mlx_init();
	vars.win = mlx_new_window(vars.mlx, 1920, 1080, "so_long");
	mlx_hook(vars.win, 2, 1L<<0, ft_close, &vars);
	mlx_loop(vars.mlx);
	return (0);
}

/*
int	main()
{
	void	*mlx;
	void	*mlx_win;
	t_data	img;
	int		x;
	int		y;
	int		colour;

	mlx = mlx_init();
	mlx_win = mlx_new_window(mlx, 1080, 1080, "so_long");
	img.img = mlx_new_image(mlx, 1080, 1080);
	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_length, &img.endian);
	x = 0;
	y = 0;
	colour = 0x00000000;
	while (x < 1080)
	{
		y = 0;
		if (x % 15)
		{
			while (y < 1080)
			{
				colour++;
				if (x > 300 && x < 600 && y > 300 && y < 600)
					colour = 0xF00F00A0;
				my_mlx_pixel_put(&img, x, y, colour);
				y++;
			}
		}
		colour *= 2;
		x++;
		y++;
	}
	mlx_put_image_to_window(mlx, mlx_win, img.img, 0, 0);
	mlx_loop(mlx);
	return (0);
}*/



typedef struct	s_vars {
	void	*mlx;
	void	*win;
	int		keycode;
}				t_vars;

int ft_key_hook(int keycode, t_vars *vars)
{
	printf("%d\n", keycode);
	return (0);
}

int	mouse_hook(int keycode, t_vars *vars)
{
	printf("%d\n", keycode);
	return (0);
}

int main()
{
	t_vars	vars;

	vars.mlx = mlx_init();
	vars.win = mlx_new_window(vars.mlx, 1080, 1080, "so_long");
	mlx_key_hook(vars.win, ft_key_hook, &vars);
	mlx_mouse_hook(vars.win, mouse_hook, &vars);
	mlx_loop(vars.mlx);
}

int	ft_close(int X11_keycode, t_vars	*vars)
{
	if (X11_keycode == 0xff1b) // X11 code for ESC key
		mlx_destroy_window(vars->mlx, vars->win);
	return (0);	
}

int main()
{
	void	*mlx;
	void	*mlx_win;
//	t_data	img;
	t_vars	vars;
	
	mlx = mlx_init();
	mlx_win = mlx_new_window(vars.mlx, 1080, 1080, "so_long");
//	img.img = mlx_new_image(mlx, 1080, 1080);
//	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_len, &img.endian);
//	mlx_put_image_to_window(mlx, mlx_win, img.img, 0, 0);
	mlx_hook(vars.win, 2, 1L<<0, ft_close, &vars);
	mlx_loop(vars.mlx);
	return (0);
}


This worked for Hooks (or almost)

int	ft_close(int keycode, t_vars *vars)
{
	printf("%d\n", keycode);
	mlx_destroy_window(vars->mlx, vars->win);
	//if (keycode == 53)
	//	mlx_destroy_window(vars->mlx, vars->win);
	return (0);
}


int main()
{
	t_vars	vars;
	
	vars = (t_vars){};
	vars.mlx = mlx_init();
	vars.win = mlx_new_window(vars.mlx, 512, 288, "so_long");
	mlx_key_hook(vars.win, ft_close, &vars);
	mlx_loop(vars.mlx);
	return (0);
}




/*
typedef struct	s_data {
	void	*img;
	void	*map;
	char	*addr;
	int		bits_per_pixel;
	int		line_len;
	int		endian;
	int		x;
	int		y;
	void	*mlx;
	void	*win;
	int		keycode;
	char	*relative_path;

}			t_data;

char	**read_map(char *filepath)
{
	int		fd;
	char	*line;
	int		i;
	int		j;
	char	**map;
	int		nb_line;

	
	fd = open(filepath, O_RDONLY);
	if (fd < 0)
		return (NULL);
	i = 0;
	nb_line = 0;
	while (line = get_next_line(fd))
	{
		j = 0;
		map = (char **)malloc((nb_line + 1) * sizeof(char *));
		if(!map)
			return NULL;
		while (i != nb_line + 1)
		{
			map[i] = line;
		}
		i++;
	}
	
}

//Draw map from the char** 

void	ft_draw_map(t_data *data)
{
	mlx_clear_window(data->mlx, data->win);
}

void	ft_draw_img(t_data *data)
{
	mlx_clear_window(data->mlx, data->win);
	mlx_xpm_file_to_image(data->mlx, data->relative_path, data->x, data->y);
}

int ft_keypress(int keycode, t_data *data)
{
	if (keycode == 0) //keycode for a
		data->y -= 10;
	else if (keycode == 13) //keycode for w
		data->x += 10;
	else if (keycode == 1) //keycode for s
		data->x -= 10;
	else if (keycode == 2) //keycode for d
		data->y += 10;
	else if (keycode == 53) //keycode for ESC
		mlx_destroy_window(data->mlx, data->win);
	ft_draw_img(data);
	return (0);
}

int	render_next_frame(void *data)
{
	if (data)
		return (0);
	mlx_do_sync(&data);
	//continuous rendering code
	return (0);
}

int main()
{
	t_data	data;
	
	data.relative_path = "./textures/KingKong.xpm";
	// initialise window 
	data.mlx = mlx_init();
	data.win = mlx_new_window(data.mlx, 1024, 1024 , "so_long");
	
	// Create image and associate it to window
	data.img = mlx_new_image(data.mlx, 1024, 1024);
	data.map = mlx_new_image(data.mlx, 1024, 1024);

	//initial position of cursor 
	//data.x = 320;
	//data.y = 320;

	//Create image of King Kong
	data.img = mlx_xpm_file_to_image(data.mlx, data.relative_path, &data.x, &data.y);
	data.addr = mlx_get_data_addr(data.img, &data.bits_per_pixel, &data.line_len, &data.endian);
	mlx_put_image_to_window(data.mlx, data.win, data.img, data.x, data.y);

	// set up key press callback
	mlx_key_hook(data.win, ft_keypress, &data);
	
	// look hook for continuous rendering
	mlx_loop_hook(data.mlx, render_next_frame, &data);
	
	mlx_loop(data.mlx);
	return (0);
}